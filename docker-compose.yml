name: "book-service"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:3.4.1
    ports:
      - "9092:9092"
    volumes:
      - ./kafka/data:/bitnami
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "18080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
      - zookeeper


  mongodb:
    image: mongo:latest
    container_name: mongodb_container
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  admin_app:
    build:
      context: .
      dockerfile: docker/admin/Dockerfile
    container_name: django_container
    command:
      sh -c "
      python manage.py migrate &&
      python manage.py runserver 0.0.0.0:45000"
    ports:
      - "45000:45000"
    depends_on:
      - postgres_db
      - kafka
      - zookeeper
      - kafka-ui
    env_file:
      - .env

  api_app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    container_name: fastapi_container
    ports:
      - "8000:8000"
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
    env_file:
      - .env
    depends_on:
      - mongodb
      - kafka
      - zookeeper
      - kafka-ui

  postgres_db:
    image: postgres:15
    container_name: postgres_container
    ports:
      - "5433:5433"
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: [ "postgres", "-p", "5433" ]

  consumer_user_app:
    build:
      context: .
      dockerfile: docker/admin/Dockerfile
    container_name: consumer_user_container
    command:
      sh -c "
      python manage.py consume_users"
    ports:
      - "45001:45001"
    depends_on:
      - postgres_db
      - kafka
      - zookeeper
      - kafka-ui
    env_file:
      - .env

  consumer_book_app:
    build:
      context: .
      dockerfile: docker/admin/Dockerfile
    container_name: consumer_book_container
    command:
        sh -c "
        python manage.py borrow_consumer"
    ports:
      - "45002:45002"
    depends_on:
      - postgres_db
      - kafka
      - zookeeper
      - kafka-ui
    env_file:
      - .env




volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  mongo_data:
  postgres_data:
